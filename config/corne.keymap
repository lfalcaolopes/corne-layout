
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#include "zmk-helpers/key-labels/42.h"     

#include "includes/settings.dtsi"
#include "includes/behaviours_homerow_mods.dtsi"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5// right-hand keys
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150
#define QUICK_TAP_TERM 175

&lt {
    // Increase layer tap time
    tapping-term-ms = <300>;

    // Quickly tap-tap-holding the lt button will repeat the tap behavior
    // For example enter-enter-hold, will output multiple enter while you
    // keep holding the key.
    // But holding enter without double tapping, will activate the layer.
     quick-tap-ms = <QUICK_TAP_TERM>;

     flavor = "balanced";
};

/ {

    behaviors {

        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.

        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP_TERM>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP_TERM>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };


        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.
        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <QUICK_TAP_TERM>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            // hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <QUICK_TAP_TERM>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            // hold-trigger-on-release;
        };
    };
};

/ {
    td {
        capsword_capslock {
            bindings = <&kp>, <&kp>;
        };
    };
}

/ {
    macros {
        vim_save: vim_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp W &kp RET>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R        &kp T        &kp Y      &kp U       &kp I      &kp O    &kp P     &kp MINUS
&ht LSHFT &td capsword_capslock  &hm_l LGUI A  &hm_l LALT S  &hm_shift_l LSHFT D     &hm_l LCTRL F        &kp G        &kp H      &hm_r LCTRL J       &hm_shift_r LSHFT K      &hm_r LALT L    &hm_r LGUI SEMI  &kp SQT
&kp LCTRL  &kp Z  &kp X  &kp C     &kp V        &kp B        &kp N      &kp M       &kp COMMA  &kp DOT  &kp FSLH  &kp LGUI
                         &kp LALT  &lt 1 SPACE  &lt 2 ESC    &lt 3 RET  &lt 4 BSPC  &kp DEL
            >;
        };

        Nav {
            bindings = <
&none  &none     &none     &none      &none      &none    &kp F1    &kp F2         &kp F3   &kp F4     &kp F5   &kp F6
&none  &kp LGUI  &kp LALT  &kp LSHFT  &kp LCTRL  &none    &kp LEFT  &kp DOWN       &kp UP   &kp RIGHT  &vim_save    &none
&none  &none     &none     &none      &none      &none    &kp F7    &kp F8         &kp F9   &kp F10    &kp F11  &kp F12
                           &none      &none      &none    &kp RET   &kp BACKSPACE  &kp DEL
            >;
        };

        Numeric {
            bindings = <
&none  &none     &none     &none      &none      &none    &none      &kp N7  &kp N8     &kp N9  &none     &none
&none  &kp LGUI  &kp LALT  &kp LSHFT  &kp LCTRL  &none    &kp EQUAL  &kp N4  &kp N5     &kp N6  &kp PLUS  &kp MINUS
&none  &none     &none     &none      &none      &none    &none      &kp N1  &kp N2     &kp N3  &none     &none
                           &none      &none      &none    &kp DOT    &kp N0  &kp COMMA
            >;
        };

        Media {
            bindings = <
&none            &none         &kp INS       &kp HOME      &kp END           &none           &none  &none      &none      &none     &none     &none
&kp PRINTSCREEN  &kp C_VOL_DN  &kp K_PREV    &kp K_NEXT    &kp C_VOL_UP      &none           &none  &kp LCTRL  &kp LSHFT  &kp LALT  &kp LGUI  &none
&bt BT_CLR       &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1      &bt BT_SEL 0    &none  &none      &none      &none     &none     &none
                                             &kp K_STOP    &kp K_PLAY_PAUSE  &kp K_MUTE      &none  &none      &none
            >;
        };

        Symbols {
            bindings = <
&kp BSLH  &kp EXCL   &kp AT_SIGN  &kp LEFT_BRACE  &kp RIGHT_BRACE  &none        &none  &none      &none      &none     &none     &none
&kp AMPS  &kp HASH   &kp DLLR     &kp LPAR        &kp RPAR         &none        &none  &kp LCTRL  &kp LSHFT  &kp LALT  &kp LGUI  &none
&kp PIPE  &kp PRCNT  &kp ASTRK    &kp LBKT        &kp RBKT         &none        &none  &none      &none      &none     &none     &none
                                  &kp CARET       &kp TILDE        &kp GRAVE    &none  &none      &none
            >;
        };
    };
};
